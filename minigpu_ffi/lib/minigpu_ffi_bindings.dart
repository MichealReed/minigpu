// ignore_for_file: camel_case_types
// ignore_for_file: prefer_double_quotes
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: prefer_expression_function_bodies
// ignore_for_file: sort_constructors_first
// ignore_for_file: unused_element

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

@ffi.Native<ffi.Void Function()>()
external void mgpuInitializeContext();

@ffi.Native<ffi.Void Function(MGPUCallback)>()
external void mgpuInitializeContextAsync(
  MGPUCallback callback,
);

@ffi.Native<ffi.Void Function()>()
external void mgpuDestroyContext();

@ffi.Native<ffi.Pointer<MGPUComputeShader> Function()>()
external ffi.Pointer<MGPUComputeShader> mgpuCreateComputeShader();

@ffi.Native<ffi.Void Function(ffi.Pointer<MGPUComputeShader>)>()
external void mgpuDestroyComputeShader(
  ffi.Pointer<MGPUComputeShader> shader,
);

@ffi.Native<
    ffi.Void Function(ffi.Pointer<MGPUComputeShader>, ffi.Pointer<ffi.Char>)>()
external void mgpuLoadKernel(
  ffi.Pointer<MGPUComputeShader> shader,
  ffi.Pointer<ffi.Char> kernelString,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<MGPUComputeShader>)>()
external int mgpuHasKernel(
  ffi.Pointer<MGPUComputeShader> shader,
);

@ffi.Native<ffi.Pointer<MGPUBuffer> Function(ffi.Int)>()
external ffi.Pointer<MGPUBuffer> mgpuCreateBuffer(
  int bufferSize,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<MGPUBuffer>)>()
external void mgpuDestroyBuffer(
  ffi.Pointer<MGPUBuffer> buffer,
);

@ffi.Native<
    ffi.Void Function(
        ffi.Pointer<MGPUComputeShader>, ffi.Int, ffi.Pointer<MGPUBuffer>)>()
external void mgpuSetBuffer(
  ffi.Pointer<MGPUComputeShader> shader,
  int tag,
  ffi.Pointer<MGPUBuffer> buffer,
);

@ffi.Native<
    ffi.Void Function(
        ffi.Pointer<MGPUComputeShader>, ffi.Int, ffi.Int, ffi.Int)>()
external void mgpuDispatch(
  ffi.Pointer<MGPUComputeShader> shader,
  int groupsX,
  int groupsY,
  int groupsZ,
);

@ffi.Native<
    ffi.Void Function(ffi.Pointer<MGPUComputeShader>, ffi.Int, ffi.Int, ffi.Int,
        MGPUCallback)>()
external void mgpuDispatchAsync(
  ffi.Pointer<MGPUComputeShader> shader,
  int groupsX,
  int groupsY,
  int groupsZ,
  MGPUCallback callback,
);

@ffi.Native<
    ffi.Void Function(
        ffi.Pointer<MGPUBuffer>, ffi.Pointer<ffi.Float>, ffi.Size, ffi.Size)>()
external void mgpuReadBufferSync(
  ffi.Pointer<MGPUBuffer> buffer,
  ffi.Pointer<ffi.Float> outputData,
  int size,
  int offset,
);

@ffi.Native<
    ffi.Void Function(ffi.Pointer<MGPUBuffer>, ffi.Pointer<ffi.Float>, ffi.Size,
        ffi.Size, MGPUCallback)>()
external void mgpuReadBufferAsync(
  ffi.Pointer<MGPUBuffer> buffer,
  ffi.Pointer<ffi.Float> outputData,
  int size,
  int offset,
  MGPUCallback callback,
);

@ffi.Native<
    ffi.Void Function(
        ffi.Pointer<MGPUBuffer>, ffi.Pointer<ffi.Float>, ffi.Size)>()
external void mgpuSetBufferData(
  ffi.Pointer<MGPUBuffer> buffer,
  ffi.Pointer<ffi.Float> inputData,
  int byteSize,
);

final class MGPUComputeShader extends ffi.Opaque {}

final class MGPUBuffer extends ffi.Opaque {}

typedef MGPUCallbackFunction = ffi.Void Function();
typedef DartMGPUCallbackFunction = void Function();
typedef MGPUCallback = ffi.Pointer<ffi.NativeFunction<MGPUCallbackFunction>>;
